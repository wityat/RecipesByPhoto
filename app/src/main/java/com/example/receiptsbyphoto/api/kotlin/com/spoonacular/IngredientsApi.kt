/**
* spoonacular API
* The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
*
* The version of the OpenAPI document: 1.0
* Contact: mail@spoonacular.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.spoonacular

import com.spoonacular.client.model.InlineObject2
import com.spoonacular.client.model.InlineResponse20022
import com.spoonacular.client.model.InlineResponse20024
import com.spoonacular.client.model.InlineResponse20025
import com.spoonacular.client.model.InlineResponse20026
import com.spoonacular.client.model.InlineResponse20034
import com.spoonacular.client.model.RecipesParseIngredientsNutritionWeightPerServing

import spoonacular.infrastructure.ApiClient
import spoonacular.infrastructure.ClientException
import spoonacular.infrastructure.ClientError
import spoonacular.infrastructure.ServerException
import spoonacular.infrastructure.ServerError
import spoonacular.infrastructure.MultiValueMap
import spoonacular.infrastructure.RequestConfig
import spoonacular.infrastructure.RequestMethod
import spoonacular.infrastructure.ResponseType
import spoonacular.infrastructure.Success
import spoonacular.infrastructure.toMultiValue

class IngredientsApi(basePath: kotlin.String = "https://api.spoonacular.com") : ApiClient(basePath) {

    /**
    * Autocomplete Ingredient Search
    * Autocomplete the entry of an ingredient.
    * @param query The (natural language) search query. (optional)
    * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
    * @param metaInformation Whether to return more meta information about the ingredients. (optional)
    * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
    * @return kotlin.Array<InlineResponse20024>
    */
    @Suppress("UNCHECKED_CAST")
    fun autocompleteIngredientSearch(query: kotlin.String?, number: kotlin.Int?, metaInformation: kotlin.Boolean?, intolerances: kotlin.String?) : kotlin.Array<InlineResponse20024> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "number" to listOf("$number"), "metaInformation" to listOf("$metaInformation"), "intolerances" to listOf("$intolerances"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/autocomplete",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InlineResponse20024>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse20024>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Compute Ingredient Amount
    * Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
    * @param id The id of the ingredient you want the amount for. 
    * @param nutrient The target nutrient. See a list of supported nutrients. 
    * @param target The target number of the given nutrient. 
    * @param unit The target unit. (optional)
    * @return RecipesParseIngredientsNutritionWeightPerServing
    */
    @Suppress("UNCHECKED_CAST")
    fun computeIngredientAmount(id: Int, nutrient: kotlin.String, target: Int, unit: kotlin.String?) : RecipesParseIngredientsNutritionWeightPerServing {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("nutrient" to listOf("$nutrient"), "target" to listOf("$target"), "unit" to listOf("$unit"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/{id}/amount".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<RecipesParseIngredientsNutritionWeightPerServing>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RecipesParseIngredientsNutritionWeightPerServing
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Ingredient Information
    * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
    * @param id The item&#39;s id. 
    * @param amount The amount of this ingredient. (optional)
    * @param unit The unit for the given amount. (optional)
    * @return InlineResponse20022
    */
    @Suppress("UNCHECKED_CAST")
    fun getIngredientInformation(id: kotlin.Int, amount: Float?, unit: kotlin.String?) : InlineResponse20022 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("amount" to listOf("$amount"), "unit" to listOf("$unit"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/{id}/information".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20022>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20022
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Ingredient Substitutes
    * Search for substitutes for a given ingredient.
    * @param ingredientName The name of the ingredient you want to replace. 
    * @return InlineResponse20026
    */
    @Suppress("UNCHECKED_CAST")
    fun getIngredientSubstitutes(ingredientName: kotlin.String) : InlineResponse20026 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("ingredientName" to listOf("$ingredientName"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/substitutes",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20026>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20026
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Ingredient Substitutes by ID
    * Search for substitutes for a given ingredient.
    * @param id The item&#39;s id. 
    * @return InlineResponse20026
    */
    @Suppress("UNCHECKED_CAST")
    fun getIngredientSubstitutesByID(id: kotlin.Int) : InlineResponse20026 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/{id}/substitutes".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20026>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20026
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Ingredient Search
    * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
    * @param query The (natural language) search query. (optional)
    * @param addChildren Whether to add children of found foods. (optional)
    * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
    * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
    * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
    * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
    * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
    * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
    * @param metaInformation Whether to return more meta information about the ingredients. (optional)
    * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
    * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
    * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
    * @param offset The number of results to skip (between 0 and 900). (optional)
    * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
    * @return InlineResponse20025
    */
    @Suppress("UNCHECKED_CAST")
    fun ingredientSearch(query: kotlin.String?, addChildren: kotlin.Boolean?, minProteinPercent: Float?, maxProteinPercent: Float?, minFatPercent: Float?, maxFatPercent: Float?, minCarbsPercent: Float?, maxCarbsPercent: Float?, metaInformation: kotlin.Boolean?, intolerances: kotlin.String?, sort: kotlin.String?, sortDirection: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?) : InlineResponse20025 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "addChildren" to listOf("$addChildren"), "minProteinPercent" to listOf("$minProteinPercent"), "maxProteinPercent" to listOf("$maxProteinPercent"), "minFatPercent" to listOf("$minFatPercent"), "maxFatPercent" to listOf("$maxFatPercent"), "minCarbsPercent" to listOf("$minCarbsPercent"), "maxCarbsPercent" to listOf("$maxCarbsPercent"), "metaInformation" to listOf("$metaInformation"), "intolerances" to listOf("$intolerances"), "sort" to listOf("$sort"), "sortDirection" to listOf("$sortDirection"), "offset" to listOf("$offset"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/ingredients/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20025>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20025
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Ingredients by ID Image
    * Visualize a recipe&#39;s ingredient list.
    * @param id The recipe id. 
    * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun ingredientsByIDImage(id: Float, measure: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("measure" to listOf("$measure"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/ingredientWidget.png".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Map Ingredients to Grocery Products
    * Map a set of ingredients to products you can buy in the grocery store.
    * @param inlineObject2  
    * @return kotlin.Array<InlineResponse20034>
    */
    @Suppress("UNCHECKED_CAST")
    fun mapIngredientsToGroceryProducts(inlineObject2: InlineObject2) : kotlin.Array<InlineResponse20034> {
        val localVariableBody: kotlin.Any? = inlineObject2
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/food/ingredients/map",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InlineResponse20034>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse20034>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Ingredients Widget
    * Visualize ingredients of a recipe. You can play around with that endpoint!
    * @param contentMinusType The content type. (optional)
    * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
    * @param accept Accept header. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeIngredients(contentMinusType: kotlin.String?, language: kotlin.String?, accept: kotlin.String?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to contentMinusType.toString(), "Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeIngredients",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
