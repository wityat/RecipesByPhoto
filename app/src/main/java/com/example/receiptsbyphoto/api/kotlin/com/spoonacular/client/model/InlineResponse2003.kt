/**
* spoonacular API
* The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
*
* The version of the OpenAPI document: 1.0
* Contact: mail@spoonacular.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.spoonacular.client.model

import com.spoonacular.client.model.InlineResponse2003ExtendedIngredients
import com.spoonacular.client.model.InlineResponse2003WinePairing

import com.squareup.moshi.Json
/**
 * 
 * @param id 
 * @param title 
 * @param image 
 * @param imageType 
 * @param servings 
 * @param readyInMinutes 
 * @param license 
 * @param sourceName 
 * @param sourceUrl 
 * @param spoonacularSourceUrl 
 * @param aggregateLikes 
 * @param healthScore 
 * @param spoonacularScore 
 * @param pricePerServing 
 * @param analyzedInstructions 
 * @param cheap 
 * @param creditsText 
 * @param cuisines 
 * @param dairyFree 
 * @param diets 
 * @param gaps 
 * @param glutenFree 
 * @param instructions 
 * @param ketogenic 
 * @param lowFodmap 
 * @param occasions 
 * @param sustainable 
 * @param vegan 
 * @param vegetarian 
 * @param veryHealthy 
 * @param veryPopular 
 * @param whole30 
 * @param weightWatcherSmartPoints 
 * @param dishTypes 
 * @param extendedIngredients 
 * @param summary 
 * @param winePairing 
 */
data class InlineResponse2003 (
    @Json(name = "id")
    val id: kotlin.Int,
    @Json(name = "title")
    val title: kotlin.String,
    @Json(name = "image")
    val image: kotlin.String,
    @Json(name = "imageType")
    val imageType: kotlin.String,
    @Json(name = "servings")
    val servings: Int,
    @Json(name = "readyInMinutes")
    val readyInMinutes: kotlin.Int,
    @Json(name = "license")
    val license: kotlin.String,
    @Json(name = "sourceName")
    val sourceName: kotlin.String,
    @Json(name = "sourceUrl")
    val sourceUrl: kotlin.String,
    @Json(name = "spoonacularSourceUrl")
    val spoonacularSourceUrl: kotlin.String,
    @Json(name = "aggregateLikes")
    val aggregateLikes: kotlin.Int,
    @Json(name = "healthScore")
    val healthScore: Int,
    @Json(name = "spoonacularScore")
    val spoonacularScore: Int,
    @Json(name = "pricePerServing")
    val pricePerServing: Int,
    @Json(name = "analyzedInstructions")
    val analyzedInstructions: kotlin.Array<kotlin.Any>,
    @Json(name = "cheap")
    val cheap: kotlin.Boolean,
    @Json(name = "creditsText")
    val creditsText: kotlin.String,
    @Json(name = "cuisines")
    val cuisines: kotlin.Array<kotlin.String>,
    @Json(name = "dairyFree")
    val dairyFree: kotlin.Boolean,
    @Json(name = "diets")
    val diets: kotlin.Array<kotlin.String>,
    @Json(name = "gaps")
    val gaps: kotlin.String,
    @Json(name = "glutenFree")
    val glutenFree: kotlin.Boolean,
    @Json(name = "instructions")
    val instructions: kotlin.String,
    @Json(name = "ketogenic")
    val ketogenic: kotlin.Boolean,
    @Json(name = "lowFodmap")
    val lowFodmap: kotlin.Boolean,
    @Json(name = "occasions")
    val occasions: kotlin.Array<kotlin.String>,
    @Json(name = "sustainable")
    val sustainable: kotlin.Boolean,
    @Json(name = "vegan")
    val vegan: kotlin.Boolean,
    @Json(name = "vegetarian")
    val vegetarian: kotlin.Boolean,
    @Json(name = "veryHealthy")
    val veryHealthy: kotlin.Boolean,
    @Json(name = "veryPopular")
    val veryPopular: kotlin.Boolean,
    @Json(name = "whole30")
    val whole30: kotlin.Boolean,
    @Json(name = "weightWatcherSmartPoints")
    val weightWatcherSmartPoints: Int,
    @Json(name = "dishTypes")
    val dishTypes: kotlin.Array<kotlin.String>,
    @Json(name = "extendedIngredients")
    val extendedIngredients: kotlin.Array<InlineResponse2003ExtendedIngredients>,
    @Json(name = "summary")
    val summary: kotlin.String,
    @Json(name = "winePairing")
    val winePairing: InlineResponse2003WinePairing
) {

}

