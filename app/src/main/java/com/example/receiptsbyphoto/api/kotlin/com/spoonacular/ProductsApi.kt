/**
* spoonacular API
* The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
*
* The version of the OpenAPI document: 1.0
* Contact: mail@spoonacular.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.spoonacular

import com.spoonacular.client.model.InlineObject
import com.spoonacular.client.model.InlineObject1
import com.spoonacular.client.model.InlineResponse20027
import com.spoonacular.client.model.InlineResponse20028
import com.spoonacular.client.model.InlineResponse20030
import com.spoonacular.client.model.InlineResponse20031
import com.spoonacular.client.model.InlineResponse20032
import com.spoonacular.client.model.InlineResponse20033

import spoonacular.infrastructure.ApiClient
import spoonacular.infrastructure.ClientException
import spoonacular.infrastructure.ClientError
import spoonacular.infrastructure.ServerException
import spoonacular.infrastructure.ServerError
import spoonacular.infrastructure.MultiValueMap
import spoonacular.infrastructure.RequestConfig
import spoonacular.infrastructure.RequestMethod
import spoonacular.infrastructure.ResponseType
import spoonacular.infrastructure.Success
import spoonacular.infrastructure.toMultiValue

class ProductsApi(basePath: kotlin.String = "https://api.spoonacular.com") : ApiClient(basePath) {

    /**
    * Autocomplete Product Search
    * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
    * @param query The (partial) search query. 
    * @param number The number of results to return (between 1 and 25). (optional)
    * @return InlineResponse20032
    */
    @Suppress("UNCHECKED_CAST")
    fun autocompleteProductSearch(query: kotlin.String, number: kotlin.Int?) : InlineResponse20032 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/suggest",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20032>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20032
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Classify Grocery Product
    * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
    * @param inlineObject1  
    * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
    * @return InlineResponse20033
    */
    @Suppress("UNCHECKED_CAST")
    fun classifyGroceryProduct(inlineObject1: InlineObject1, locale: kotlin.String?) : InlineResponse20033 {
        val localVariableBody: kotlin.Any? = inlineObject1
        val localVariableQuery: MultiValueMap = mapOf("locale" to listOf("$locale"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/food/products/classify",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20033>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20033
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Classify Grocery Product Bulk
    * Provide a set of product jsons, get back classified products.
    * @param inlineObject  
    * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
    * @return kotlin.Array<InlineResponse20033>
    */
    @Suppress("UNCHECKED_CAST")
    fun classifyGroceryProductBulk(inlineObject: kotlin.Array<InlineObject>, locale: kotlin.String?) : kotlin.Array<InlineResponse20033> {
        val localVariableBody: kotlin.Any? = inlineObject
        val localVariableQuery: MultiValueMap = mapOf("locale" to listOf("$locale"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/food/products/classifyBatch",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InlineResponse20033>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse20033>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Comparable Products
    * Find comparable products to the given one.
    * @param upc The UPC of the product for which you want to find comparable products. 
    * @return InlineResponse20031
    */
    @Suppress("UNCHECKED_CAST")
    fun getComparableProducts(upc: Int) : InlineResponse20031 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/upc/{upc}/comparable".replace("{"+"upc"+"}", "$upc"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20031>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20031
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Product Information
    * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
    * @param id The item&#39;s id. 
    * @return InlineResponse20030
    */
    @Suppress("UNCHECKED_CAST")
    fun getProductInformation(id: kotlin.Int) : InlineResponse20030 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20030>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20030
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Product Nutrition by ID Image
    * Visualize a product&#39;s nutritional information as an image.
    * @param id The id of the product. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun productNutritionByIDImage(id: Int) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/{id}/nutritionWidget.png".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Product Nutrition Label Image
    * Get a product&#39;s nutrition label as an image.
    * @param id The product id. 
    * @param showOptionalNutrients Whether to show optional nutrients. (optional)
    * @param showZeroValues Whether to show zero values. (optional)
    * @param showIngredients Whether to show a list of ingredients. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun productNutritionLabelImage(id: Int, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("showOptionalNutrients" to listOf("$showOptionalNutrients"), "showZeroValues" to listOf("$showZeroValues"), "showIngredients" to listOf("$showIngredients"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/{id}/nutritionLabel.png".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Product Nutrition Label Widget
    * Get a product&#39;s nutrition label as an HTML widget.
    * @param id The product id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
    * @param showOptionalNutrients Whether to show optional nutrients. (optional)
    * @param showZeroValues Whether to show zero values. (optional)
    * @param showIngredients Whether to show a list of ingredients. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun productNutritionLabelWidget(id: Float, defaultCss: kotlin.Boolean?, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"), "showOptionalNutrients" to listOf("$showOptionalNutrients"), "showZeroValues" to listOf("$showZeroValues"), "showIngredients" to listOf("$showIngredients"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/{id}/nutritionLabel".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Grocery Products
    * Search packaged food products, such as frozen pizza or Greek yogurt.
    * @param query The (natural language) search query. (optional)
    * @param minCalories The minimum amount of calories the product must have. (optional)
    * @param maxCalories The maximum amount of calories the product can have. (optional)
    * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
    * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
    * @param minProtein The minimum amount of protein in grams the product must have. (optional)
    * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
    * @param minFat The minimum amount of fat in grams the product must have. (optional)
    * @param maxFat The maximum amount of fat in grams the product can have. (optional)
    * @param addProductInformation If set to true, you get more information about the products returned. (optional)
    * @param offset The number of results to skip (between 0 and 900). (optional)
    * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
    * @return InlineResponse20027
    */
    @Suppress("UNCHECKED_CAST")
    fun searchGroceryProducts(query: kotlin.String?, minCalories: Float?, maxCalories: Float?, minCarbs: Float?, maxCarbs: Float?, minProtein: Float?, maxProtein: Float?, minFat: Float?, maxFat: Float?, addProductInformation: kotlin.Boolean?, offset: kotlin.Int?, number: kotlin.Int?) : InlineResponse20027 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "minCalories" to listOf("$minCalories"), "maxCalories" to listOf("$maxCalories"), "minCarbs" to listOf("$minCarbs"), "maxCarbs" to listOf("$maxCarbs"), "minProtein" to listOf("$minProtein"), "maxProtein" to listOf("$maxProtein"), "minFat" to listOf("$minFat"), "maxFat" to listOf("$maxFat"), "addProductInformation" to listOf("$addProductInformation"), "offset" to listOf("$offset"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/search",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20027>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20027
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Grocery Products by UPC
    * Get information about a packaged food using its UPC.
    * @param upc The product&#39;s UPC. 
    * @return InlineResponse20028
    */
    @Suppress("UNCHECKED_CAST")
    fun searchGroceryProductsByUPC(upc: Float) : InlineResponse20028 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/upc/{upc}".replace("{"+"upc"+"}", "$upc"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20028>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20028
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Product Nutrition by ID Widget
    * Visualize a product&#39;s nutritional information as HTML including CSS.
    * @param id The item&#39;s id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
    * @param accept Accept header. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeProductNutritionByID(id: kotlin.Int, defaultCss: kotlin.Boolean?, accept: kotlin.String?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/food/products/{id}/nutritionWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
