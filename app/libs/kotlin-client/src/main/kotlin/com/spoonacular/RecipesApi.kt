/**
* spoonacular API
* The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
*
* The version of the OpenAPI document: 1.0
* Contact: mail@spoonacular.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.spoonacular

import com.spoonacular.client.model.InlineObject
import com.spoonacular.client.model.InlineResponse200
import com.spoonacular.client.model.InlineResponse2001
import com.spoonacular.client.model.InlineResponse20010
import com.spoonacular.client.model.InlineResponse20011
import com.spoonacular.client.model.InlineResponse20012
import com.spoonacular.client.model.InlineResponse20013
import com.spoonacular.client.model.InlineResponse20014
import com.spoonacular.client.model.InlineResponse20015
import com.spoonacular.client.model.InlineResponse20016
import com.spoonacular.client.model.InlineResponse20017
import com.spoonacular.client.model.InlineResponse20018
import com.spoonacular.client.model.InlineResponse20019
import com.spoonacular.client.model.InlineResponse2002
import com.spoonacular.client.model.InlineResponse20020
import com.spoonacular.client.model.InlineResponse20021
import com.spoonacular.client.model.InlineResponse20023
import com.spoonacular.client.model.InlineResponse2003
import com.spoonacular.client.model.InlineResponse2004
import com.spoonacular.client.model.InlineResponse2005
import com.spoonacular.client.model.InlineResponse20050
import com.spoonacular.client.model.InlineResponse2006
import com.spoonacular.client.model.InlineResponse2007
import com.spoonacular.client.model.InlineResponse2008
import com.spoonacular.client.model.InlineResponse2009

import spoonacular.infrastructure.ApiClient
import spoonacular.infrastructure.ClientException
import spoonacular.infrastructure.ClientError
import spoonacular.infrastructure.ServerException
import spoonacular.infrastructure.ServerError
import spoonacular.infrastructure.MultiValueMap
import spoonacular.infrastructure.RequestConfig
import spoonacular.infrastructure.RequestMethod
import spoonacular.infrastructure.ResponseType
import spoonacular.infrastructure.Success
import spoonacular.infrastructure.toMultiValue

class RecipesApi(basePath: kotlin.String = "https://api.spoonacular.com") : ApiClient(basePath) {

    /**
    * Analyze a Recipe Search Query
    * Parse a recipe search query to find out its intention.
    * @param q The recipe search query. 
    * @return InlineResponse20018
    */
    @Suppress("UNCHECKED_CAST")
    fun analyzeARecipeSearchQuery(q: kotlin.String) : InlineResponse20018 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/queries/analyze",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20018>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20018
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Analyze Recipe Instructions
    * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
    * @param contentMinusType The content type. (optional)
    * @return InlineResponse20016
    */
    @Suppress("UNCHECKED_CAST")
    fun analyzeRecipeInstructions(contentMinusType: kotlin.String?) : InlineResponse20016 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to contentMinusType.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/analyzeInstructions",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20016>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20016
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Autocomplete Recipe Search
    * Autocomplete a partial input to suggest possible recipe names.
    * @param query The (natural language) search query. (optional)
    * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
    * @return kotlin.Array<InlineResponse2007>
    */
    @Suppress("UNCHECKED_CAST")
    fun autocompleteRecipeSearch(query: kotlin.String?, number: kotlin.Int?) : kotlin.Array<InlineResponse2007> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/autocomplete",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InlineResponse2007>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse2007>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Classify Cuisine
    * Classify the recipe&#39;s cuisine.
    * @param contentMinusType The content type. (optional)
    * @return InlineResponse20017
    */
    @Suppress("UNCHECKED_CAST")
    fun classifyCuisine(contentMinusType: kotlin.String?) : InlineResponse20017 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to contentMinusType.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/cuisine",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20017>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20017
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Compute Glycemic Load
    * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
    * @param inlineObject  
    * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
    * @return InlineResponse20023
    */
    @Suppress("UNCHECKED_CAST")
    fun computeGlycemicLoad(inlineObject: InlineObject, language: kotlin.String?) : InlineResponse20023 {
        val localVariableBody: kotlin.Any? = inlineObject
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/food/ingredients/glycemicLoad",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20023>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20023
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Convert Amounts
    * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
    * @param ingredientName The ingredient which you want to convert. 
    * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. 
    * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; 
    * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; 
    * @return InlineResponse20019
    */
    @Suppress("UNCHECKED_CAST")
    fun convertAmounts(ingredientName: kotlin.String, sourceAmount: Float, sourceUnit: kotlin.String, targetUnit: kotlin.String) : InlineResponse20019 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("ingredientName" to listOf("$ingredientName"), "sourceAmount" to listOf("$sourceAmount"), "sourceUnit" to listOf("$sourceUnit"), "targetUnit" to listOf("$targetUnit"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/convert",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20019>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20019
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Create Recipe Card
    * Generate a recipe card for a recipe.
    * @param contentMinusType The content type. (optional)
    * @return InlineResponse20015
    */
    @Suppress("UNCHECKED_CAST")
    fun createRecipeCard(contentMinusType: kotlin.String?) : InlineResponse20015 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to contentMinusType.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeRecipe",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20015>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20015
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Equipment by ID Image
    * Visualize a recipe&#39;s equipment list as an image.
    * @param id The recipe id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun equipmentByIDImage(id: Float) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/equipmentWidget.png".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Extract Recipe from Website
    * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
    * @param url The URL of the recipe page. 
    * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
    * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
    * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
    * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
    * @return InlineResponse2003
    */
    @Suppress("UNCHECKED_CAST")
    fun extractRecipeFromWebsite(url: kotlin.String, forceExtraction: kotlin.Boolean?, analyze: kotlin.Boolean?, includeNutrition: kotlin.Boolean?, includeTaste: kotlin.Boolean?) : InlineResponse2003 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("url" to listOf("$url"), "forceExtraction" to listOf("$forceExtraction"), "analyze" to listOf("$analyze"), "includeNutrition" to listOf("$includeNutrition"), "includeTaste" to listOf("$includeTaste"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/extract",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2003>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Analyzed Recipe Instructions
    * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
    * @param id The item&#39;s id. 
    * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
    * @return InlineResponse20013
    */
    @Suppress("UNCHECKED_CAST")
    fun getAnalyzedRecipeInstructions(id: kotlin.Int, stepBreakdown: kotlin.Boolean?) : InlineResponse20013 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("stepBreakdown" to listOf("$stepBreakdown"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/analyzedInstructions".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20013>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20013
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Random Recipes
    * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
    * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
    * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
    * @return InlineResponse2006
    */
    @Suppress("UNCHECKED_CAST")
    fun getRandomRecipes(limitLicense: kotlin.Boolean?, tags: kotlin.String?, number: kotlin.Int?) : InlineResponse2006 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("limitLicense" to listOf("$limitLicense"), "tags" to listOf("$tags"), "number" to listOf("$number"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/random",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2006>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2006
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Equipment by ID
    * Get a recipe&#39;s equipment list.
    * @param id The item&#39;s id. 
    * @return InlineResponse2009
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeEquipmentByID(id: kotlin.Int) : InlineResponse2009 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/equipmentWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2009>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2009
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Recipe Information
    * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
    * @param id The item&#39;s id. 
    * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
    * @return InlineResponse2003
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeInformation(id: kotlin.Int, includeNutrition: kotlin.Boolean?) : InlineResponse2003 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("includeNutrition" to listOf("$includeNutrition"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/information".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2003>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Recipe Information Bulk
    * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
    * @param ids A comma-separated list of recipe ids. 
    * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
    * @return kotlin.Array<InlineResponse2004>
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeInformationBulk(ids: kotlin.String, includeNutrition: kotlin.Boolean?) : kotlin.Array<InlineResponse2004> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("ids" to listOf("$ids"), "includeNutrition" to listOf("$includeNutrition"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/informationBulk",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InlineResponse2004>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse2004>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Ingredients by ID
    * Get a recipe&#39;s ingredient list.
    * @param id The item&#39;s id. 
    * @return InlineResponse20011
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeIngredientsByID(id: kotlin.Int) : InlineResponse20011 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/ingredientWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20011>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20011
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Nutrition by ID
    * Get a recipe&#39;s nutrition data.
    * @param id The item&#39;s id. 
    * @return InlineResponse20012
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeNutritionWidgetByID(id: kotlin.Int) : InlineResponse20012 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/nutritionWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20012>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20012
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Price Breakdown by ID
    * Get a recipe&#39;s price breakdown data.
    * @param id The item&#39;s id. 
    * @return InlineResponse20010
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipePriceBreakdownByID(id: kotlin.Int) : InlineResponse20010 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/priceBreakdownWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20010>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20010
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Taste by ID
    * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    * @param id The item&#39;s id. 
    * @param normalize Normalize to the strongest taste. (optional, default to true)
    * @return InlineResponse2008
    */
    @Suppress("UNCHECKED_CAST")
    fun getRecipeTasteByID(id: kotlin.Int, normalize: kotlin.Boolean?) : InlineResponse2008 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("normalize" to listOf("$normalize"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/tasteWidget.json".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse2008>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Similar Recipes
    * Find recipes which are similar to the given one.
    * @param id The item&#39;s id. 
    * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
    * @return kotlin.Array<InlineResponse2005>
    */
    @Suppress("UNCHECKED_CAST")
    fun getSimilarRecipes(id: kotlin.Int, number: kotlin.Int?, limitLicense: kotlin.Boolean?) : kotlin.Array<InlineResponse2005> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("number" to listOf("$number"), "limitLicense" to listOf("$limitLicense"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/similar".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InlineResponse2005>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse2005>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Guess Nutrition by Dish Name
    * Estimate the macronutrients of a dish based on its title.
    * @param title The title of the dish. 
    * @return InlineResponse20021
    */
    @Suppress("UNCHECKED_CAST")
    fun guessNutritionByDishName(title: kotlin.String) : InlineResponse20021 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("title" to listOf("$title"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/guessNutrition",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20021>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20021
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Ingredients by ID Image
    * Visualize a recipe&#39;s ingredient list.
    * @param id The recipe id. 
    * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun ingredientsByIDImage(id: Float, measure: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("measure" to listOf("$measure"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/ingredientWidget.png".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Parse Ingredients
    * Extract an ingredient from plain text.
    * @param contentMinusType The content type. (optional)
    * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
    * @return kotlin.Array<InlineResponse20020>
    */
    @Suppress("UNCHECKED_CAST")
    fun parseIngredients(contentMinusType: kotlin.String?, language: kotlin.String?) : kotlin.Array<InlineResponse20020> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to contentMinusType.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/parseIngredients",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InlineResponse20020>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse20020>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Price Breakdown by ID Image
    * Visualize a recipe&#39;s price breakdown.
    * @param id The recipe id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun priceBreakdownByIDImage(id: Float) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/priceBreakdownWidget.png".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Quick Answer
    * Answer a nutrition related natural language question.
    * @param q The nutrition related question. 
    * @return InlineResponse20050
    */
    @Suppress("UNCHECKED_CAST")
    fun quickAnswer(q: kotlin.String) : InlineResponse20050 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("q" to listOf("$q"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/quickAnswer",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20050>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20050
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Recipe Nutrition by ID Image
    * Visualize a recipe&#39;s nutritional information as an image.
    * @param id The recipe id. 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun recipeNutritionByIDImage(id: Float) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/nutritionWidget.png".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Recipe Nutrition Label Image
    * Get a recipe&#39;s nutrition label as an image.
    * @param id The recipe id. 
    * @param showOptionalNutrients Whether to show optional nutrients. (optional)
    * @param showZeroValues Whether to show zero values. (optional)
    * @param showIngredients Whether to show a list of ingredients. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun recipeNutritionLabelImage(id: Float, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("showOptionalNutrients" to listOf("$showOptionalNutrients"), "showZeroValues" to listOf("$showZeroValues"), "showIngredients" to listOf("$showIngredients"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/nutritionLabel.png".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Recipe Nutrition Label Widget
    * Get a recipe&#39;s nutrition label as an HTML widget.
    * @param id The recipe id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
    * @param showOptionalNutrients Whether to show optional nutrients. (optional)
    * @param showZeroValues Whether to show zero values. (optional)
    * @param showIngredients Whether to show a list of ingredients. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun recipeNutritionLabelWidget(id: Float, defaultCss: kotlin.Boolean?, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"), "showOptionalNutrients" to listOf("$showOptionalNutrients"), "showZeroValues" to listOf("$showZeroValues"), "showIngredients" to listOf("$showIngredients"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/nutritionLabel".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Recipe Taste by ID Image
    * Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    * @param id The recipe id. 
    * @param normalize Normalize to the strongest taste. (optional)
    * @param rgb Red, green, blue values for the chart color. (optional)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun recipeTasteByIDImage(id: Float, normalize: kotlin.Boolean?, rgb: kotlin.String?) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("normalize" to listOf("$normalize"), "rgb" to listOf("$rgb"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/tasteWidget.png".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Recipes
    * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
    * @param query The (natural language) search query. (optional)
    * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
    * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
    * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
    * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
    * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
    * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
    * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
    * @param type The type of recipe. See a full list of supported meal types. (optional)
    * @param instructionsRequired Whether the recipes must have instructions. (optional)
    * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
    * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
    * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
    * @param author The username of the recipe author. (optional)
    * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
    * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
    * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
    * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
    * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
    * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
    * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
    * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
    * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
    * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
    * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
    * @param minCalories The minimum amount of calories the recipe must have. (optional)
    * @param maxCalories The maximum amount of calories the recipe can have. (optional)
    * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
    * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
    * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
    * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
    * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
    * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
    * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
    * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
    * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
    * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
    * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
    * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
    * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
    * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
    * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
    * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
    * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
    * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
    * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
    * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
    * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
    * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
    * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
    * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
    * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
    * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
    * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
    * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
    * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
    * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
    * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
    * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
    * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
    * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
    * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
    * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
    * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
    * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
    * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
    * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
    * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
    * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
    * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
    * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
    * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
    * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
    * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
    * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
    * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
    * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
    * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
    * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
    * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
    * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
    * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
    * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
    * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
    * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
    * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
    * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
    * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
    * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
    * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
    * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
    * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
    * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
    * @param offset The number of results to skip (between 0 and 900). (optional)
    * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
    * @return InlineResponse200
    */
    @Suppress("UNCHECKED_CAST")
    fun searchRecipes(query: kotlin.String?, cuisine: kotlin.String?, excludeCuisine: kotlin.String?, diet: kotlin.String?, intolerances: kotlin.String?, equipment: kotlin.String?, includeIngredients: kotlin.String?, excludeIngredients: kotlin.String?, type: kotlin.String?, instructionsRequired: kotlin.Boolean?, fillIngredients: kotlin.Boolean?, addRecipeInformation: kotlin.Boolean?, addRecipeNutrition: kotlin.Boolean?, author: kotlin.String?, tags: kotlin.String?, recipeBoxId: Float?, titleMatch: kotlin.String?, maxReadyTime: Float?, ignorePantry: kotlin.Boolean?, sort: kotlin.String?, sortDirection: kotlin.String?, minCarbs: Float?, maxCarbs: Float?, minProtein: Float?, maxProtein: Float?, minCalories: Float?, maxCalories: Float?, minFat: Float?, maxFat: Float?, minAlcohol: Float?, maxAlcohol: Float?, minCaffeine: Float?, maxCaffeine: Float?, minCopper: Float?, maxCopper: Float?, minCalcium: Float?, maxCalcium: Float?, minCholine: Float?, maxCholine: Float?, minCholesterol: Float?, maxCholesterol: Float?, minFluoride: Float?, maxFluoride: Float?, minSaturatedFat: Float?, maxSaturatedFat: Float?, minVitaminA: Float?, maxVitaminA: Float?, minVitaminC: Float?, maxVitaminC: Float?, minVitaminD: Float?, maxVitaminD: Float?, minVitaminE: Float?, maxVitaminE: Float?, minVitaminK: Float?, maxVitaminK: Float?, minVitaminB1: Float?, maxVitaminB1: Float?, minVitaminB2: Float?, maxVitaminB2: Float?, minVitaminB5: Float?, maxVitaminB5: Float?, minVitaminB3: Float?, maxVitaminB3: Float?, minVitaminB6: Float?, maxVitaminB6: Float?, minVitaminB12: Float?, maxVitaminB12: Float?, minFiber: Float?, maxFiber: Float?, minFolate: Float?, maxFolate: Float?, minFolicAcid: Float?, maxFolicAcid: Float?, minIodine: Float?, maxIodine: Float?, minIron: Float?, maxIron: Float?, minMagnesium: Float?, maxMagnesium: Float?, minManganese: Float?, maxManganese: Float?, minPhosphorus: Float?, maxPhosphorus: Float?, minPotassium: Float?, maxPotassium: Float?, minSelenium: Float?, maxSelenium: Float?, minSodium: Float?, maxSodium: Float?, minSugar: Float?, maxSugar: Float?, minZinc: Float?, maxZinc: Float?, offset: kotlin.Int?, number: kotlin.Int?, limitLicense: kotlin.Boolean?) : InlineResponse200 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("query" to listOf("$query"), "cuisine" to listOf("$cuisine"), "excludeCuisine" to listOf("$excludeCuisine"), "diet" to listOf("$diet"), "intolerances" to listOf("$intolerances"), "equipment" to listOf("$equipment"), "includeIngredients" to listOf("$includeIngredients"), "excludeIngredients" to listOf("$excludeIngredients"), "type" to listOf("$type"), "instructionsRequired" to listOf("$instructionsRequired"), "fillIngredients" to listOf("$fillIngredients"), "addRecipeInformation" to listOf("$addRecipeInformation"), "addRecipeNutrition" to listOf("$addRecipeNutrition"), "author" to listOf("$author"), "tags" to listOf("$tags"), "recipeBoxId" to listOf("$recipeBoxId"), "titleMatch" to listOf("$titleMatch"), "maxReadyTime" to listOf("$maxReadyTime"), "ignorePantry" to listOf("$ignorePantry"), "sort" to listOf("$sort"), "sortDirection" to listOf("$sortDirection"), "minCarbs" to listOf("$minCarbs"), "maxCarbs" to listOf("$maxCarbs"), "minProtein" to listOf("$minProtein"), "maxProtein" to listOf("$maxProtein"), "minCalories" to listOf("$minCalories"), "maxCalories" to listOf("$maxCalories"), "minFat" to listOf("$minFat"), "maxFat" to listOf("$maxFat"), "minAlcohol" to listOf("$minAlcohol"), "maxAlcohol" to listOf("$maxAlcohol"), "minCaffeine" to listOf("$minCaffeine"), "maxCaffeine" to listOf("$maxCaffeine"), "minCopper" to listOf("$minCopper"), "maxCopper" to listOf("$maxCopper"), "minCalcium" to listOf("$minCalcium"), "maxCalcium" to listOf("$maxCalcium"), "minCholine" to listOf("$minCholine"), "maxCholine" to listOf("$maxCholine"), "minCholesterol" to listOf("$minCholesterol"), "maxCholesterol" to listOf("$maxCholesterol"), "minFluoride" to listOf("$minFluoride"), "maxFluoride" to listOf("$maxFluoride"), "minSaturatedFat" to listOf("$minSaturatedFat"), "maxSaturatedFat" to listOf("$maxSaturatedFat"), "minVitaminA" to listOf("$minVitaminA"), "maxVitaminA" to listOf("$maxVitaminA"), "minVitaminC" to listOf("$minVitaminC"), "maxVitaminC" to listOf("$maxVitaminC"), "minVitaminD" to listOf("$minVitaminD"), "maxVitaminD" to listOf("$maxVitaminD"), "minVitaminE" to listOf("$minVitaminE"), "maxVitaminE" to listOf("$maxVitaminE"), "minVitaminK" to listOf("$minVitaminK"), "maxVitaminK" to listOf("$maxVitaminK"), "minVitaminB1" to listOf("$minVitaminB1"), "maxVitaminB1" to listOf("$maxVitaminB1"), "minVitaminB2" to listOf("$minVitaminB2"), "maxVitaminB2" to listOf("$maxVitaminB2"), "minVitaminB5" to listOf("$minVitaminB5"), "maxVitaminB5" to listOf("$maxVitaminB5"), "minVitaminB3" to listOf("$minVitaminB3"), "maxVitaminB3" to listOf("$maxVitaminB3"), "minVitaminB6" to listOf("$minVitaminB6"), "maxVitaminB6" to listOf("$maxVitaminB6"), "minVitaminB12" to listOf("$minVitaminB12"), "maxVitaminB12" to listOf("$maxVitaminB12"), "minFiber" to listOf("$minFiber"), "maxFiber" to listOf("$maxFiber"), "minFolate" to listOf("$minFolate"), "maxFolate" to listOf("$maxFolate"), "minFolicAcid" to listOf("$minFolicAcid"), "maxFolicAcid" to listOf("$maxFolicAcid"), "minIodine" to listOf("$minIodine"), "maxIodine" to listOf("$maxIodine"), "minIron" to listOf("$minIron"), "maxIron" to listOf("$maxIron"), "minMagnesium" to listOf("$minMagnesium"), "maxMagnesium" to listOf("$maxMagnesium"), "minManganese" to listOf("$minManganese"), "maxManganese" to listOf("$maxManganese"), "minPhosphorus" to listOf("$minPhosphorus"), "maxPhosphorus" to listOf("$maxPhosphorus"), "minPotassium" to listOf("$minPotassium"), "maxPotassium" to listOf("$maxPotassium"), "minSelenium" to listOf("$minSelenium"), "maxSelenium" to listOf("$maxSelenium"), "minSodium" to listOf("$minSodium"), "maxSodium" to listOf("$maxSodium"), "minSugar" to listOf("$minSugar"), "maxSugar" to listOf("$maxSugar"), "minZinc" to listOf("$minZinc"), "maxZinc" to listOf("$maxZinc"), "offset" to listOf("$offset"), "number" to listOf("$number"), "limitLicense" to listOf("$limitLicense"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/complexSearch",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse200>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Recipes by Ingredients
    *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
    * @param ingredients A comma-separated list of ingredients that the recipes should contain. (optional)
    * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
    * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
    * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
    * @return kotlin.Array<InlineResponse2001>
    */
    @Suppress("UNCHECKED_CAST")
    fun searchRecipesByIngredients(ingredients: kotlin.String?, number: kotlin.Int?, limitLicense: kotlin.Boolean?, ranking: Float?, ignorePantry: kotlin.Boolean?) : kotlin.Array<InlineResponse2001> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("ingredients" to listOf("$ingredients"), "number" to listOf("$number"), "limitLicense" to listOf("$limitLicense"), "ranking" to listOf("$ranking"), "ignorePantry" to listOf("$ignorePantry"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/findByIngredients",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InlineResponse2001>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse2001>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Search Recipes by Nutrients
    * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
    * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
    * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
    * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
    * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
    * @param minCalories The minimum amount of calories the recipe must have. (optional)
    * @param maxCalories The maximum amount of calories the recipe can have. (optional)
    * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
    * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
    * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
    * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
    * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
    * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
    * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
    * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
    * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
    * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
    * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
    * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
    * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
    * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
    * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
    * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
    * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
    * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
    * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
    * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
    * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
    * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
    * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
    * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
    * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
    * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
    * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
    * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
    * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
    * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
    * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
    * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
    * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
    * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
    * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
    * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
    * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
    * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
    * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
    * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
    * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
    * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
    * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
    * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
    * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
    * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
    * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
    * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
    * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
    * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
    * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
    * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
    * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
    * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
    * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
    * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
    * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
    * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
    * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
    * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
    * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
    * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
    * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
    * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
    * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
    * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
    * @param offset The number of results to skip (between 0 and 900). (optional)
    * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
    * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
    * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
    * @return kotlin.Array<InlineResponse2002>
    */
    @Suppress("UNCHECKED_CAST")
    fun searchRecipesByNutrients(minCarbs: Float?, maxCarbs: Float?, minProtein: Float?, maxProtein: Float?, minCalories: Float?, maxCalories: Float?, minFat: Float?, maxFat: Float?, minAlcohol: Float?, maxAlcohol: Float?, minCaffeine: Float?, maxCaffeine: Float?, minCopper: Float?, maxCopper: Float?, minCalcium: Float?, maxCalcium: Float?, minCholine: Float?, maxCholine: Float?, minCholesterol: Float?, maxCholesterol: Float?, minFluoride: Float?, maxFluoride: Float?, minSaturatedFat: Float?, maxSaturatedFat: Float?, minVitaminA: Float?, maxVitaminA: Float?, minVitaminC: Float?, maxVitaminC: Float?, minVitaminD: Float?, maxVitaminD: Float?, minVitaminE: Float?, maxVitaminE: Float?, minVitaminK: Float?, maxVitaminK: Float?, minVitaminB1: Float?, maxVitaminB1: Float?, minVitaminB2: Float?, maxVitaminB2: Float?, minVitaminB5: Float?, maxVitaminB5: Float?, minVitaminB3: Float?, maxVitaminB3: Float?, minVitaminB6: Float?, maxVitaminB6: Float?, minVitaminB12: Float?, maxVitaminB12: Float?, minFiber: Float?, maxFiber: Float?, minFolate: Float?, maxFolate: Float?, minFolicAcid: Float?, maxFolicAcid: Float?, minIodine: Float?, maxIodine: Float?, minIron: Float?, maxIron: Float?, minMagnesium: Float?, maxMagnesium: Float?, minManganese: Float?, maxManganese: Float?, minPhosphorus: Float?, maxPhosphorus: Float?, minPotassium: Float?, maxPotassium: Float?, minSelenium: Float?, maxSelenium: Float?, minSodium: Float?, maxSodium: Float?, minSugar: Float?, maxSugar: Float?, minZinc: Float?, maxZinc: Float?, offset: kotlin.Int?, number: kotlin.Int?, random: kotlin.Boolean?, limitLicense: kotlin.Boolean?) : kotlin.Array<InlineResponse2002> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("minCarbs" to listOf("$minCarbs"), "maxCarbs" to listOf("$maxCarbs"), "minProtein" to listOf("$minProtein"), "maxProtein" to listOf("$maxProtein"), "minCalories" to listOf("$minCalories"), "maxCalories" to listOf("$maxCalories"), "minFat" to listOf("$minFat"), "maxFat" to listOf("$maxFat"), "minAlcohol" to listOf("$minAlcohol"), "maxAlcohol" to listOf("$maxAlcohol"), "minCaffeine" to listOf("$minCaffeine"), "maxCaffeine" to listOf("$maxCaffeine"), "minCopper" to listOf("$minCopper"), "maxCopper" to listOf("$maxCopper"), "minCalcium" to listOf("$minCalcium"), "maxCalcium" to listOf("$maxCalcium"), "minCholine" to listOf("$minCholine"), "maxCholine" to listOf("$maxCholine"), "minCholesterol" to listOf("$minCholesterol"), "maxCholesterol" to listOf("$maxCholesterol"), "minFluoride" to listOf("$minFluoride"), "maxFluoride" to listOf("$maxFluoride"), "minSaturatedFat" to listOf("$minSaturatedFat"), "maxSaturatedFat" to listOf("$maxSaturatedFat"), "minVitaminA" to listOf("$minVitaminA"), "maxVitaminA" to listOf("$maxVitaminA"), "minVitaminC" to listOf("$minVitaminC"), "maxVitaminC" to listOf("$maxVitaminC"), "minVitaminD" to listOf("$minVitaminD"), "maxVitaminD" to listOf("$maxVitaminD"), "minVitaminE" to listOf("$minVitaminE"), "maxVitaminE" to listOf("$maxVitaminE"), "minVitaminK" to listOf("$minVitaminK"), "maxVitaminK" to listOf("$maxVitaminK"), "minVitaminB1" to listOf("$minVitaminB1"), "maxVitaminB1" to listOf("$maxVitaminB1"), "minVitaminB2" to listOf("$minVitaminB2"), "maxVitaminB2" to listOf("$maxVitaminB2"), "minVitaminB5" to listOf("$minVitaminB5"), "maxVitaminB5" to listOf("$maxVitaminB5"), "minVitaminB3" to listOf("$minVitaminB3"), "maxVitaminB3" to listOf("$maxVitaminB3"), "minVitaminB6" to listOf("$minVitaminB6"), "maxVitaminB6" to listOf("$maxVitaminB6"), "minVitaminB12" to listOf("$minVitaminB12"), "maxVitaminB12" to listOf("$maxVitaminB12"), "minFiber" to listOf("$minFiber"), "maxFiber" to listOf("$maxFiber"), "minFolate" to listOf("$minFolate"), "maxFolate" to listOf("$maxFolate"), "minFolicAcid" to listOf("$minFolicAcid"), "maxFolicAcid" to listOf("$maxFolicAcid"), "minIodine" to listOf("$minIodine"), "maxIodine" to listOf("$maxIodine"), "minIron" to listOf("$minIron"), "maxIron" to listOf("$maxIron"), "minMagnesium" to listOf("$minMagnesium"), "maxMagnesium" to listOf("$maxMagnesium"), "minManganese" to listOf("$minManganese"), "maxManganese" to listOf("$maxManganese"), "minPhosphorus" to listOf("$minPhosphorus"), "maxPhosphorus" to listOf("$maxPhosphorus"), "minPotassium" to listOf("$minPotassium"), "maxPotassium" to listOf("$maxPotassium"), "minSelenium" to listOf("$minSelenium"), "maxSelenium" to listOf("$maxSelenium"), "minSodium" to listOf("$minSodium"), "maxSodium" to listOf("$maxSodium"), "minSugar" to listOf("$minSugar"), "maxSugar" to listOf("$maxSugar"), "minZinc" to listOf("$minZinc"), "maxZinc" to listOf("$maxZinc"), "offset" to listOf("$offset"), "number" to listOf("$number"), "random" to listOf("$random"), "limitLicense" to listOf("$limitLicense"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/findByNutrients",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Array<InlineResponse2002>>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<InlineResponse2002>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Summarize Recipe
    * Automatically generate a short description that summarizes key information about the recipe.
    * @param id The item&#39;s id. 
    * @return InlineResponse20014
    */
    @Suppress("UNCHECKED_CAST")
    fun summarizeRecipe(id: kotlin.Int) : InlineResponse20014 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/summary".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20014>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20014
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Equipment Widget
    * Visualize the equipment used to make a recipe.
    * @param contentMinusType The content type. (optional)
    * @param accept Accept header. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeEquipment(contentMinusType: kotlin.String?, accept: kotlin.String?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to contentMinusType.toString(), "Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeEquipment",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Price Breakdown Widget
    * Visualize the price breakdown of a recipe.
    * @param contentMinusType The content type. (optional)
    * @param accept Accept header. (optional)
    * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizePriceBreakdown(contentMinusType: kotlin.String?, accept: kotlin.String?, language: kotlin.String?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to contentMinusType.toString(), "Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizePriceEstimator",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Equipment by ID Widget
    * Visualize a recipe&#39;s equipment list.
    * @param id The item&#39;s id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeEquipmentByID(id: kotlin.Int, defaultCss: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/equipmentWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Ingredients by ID Widget
    * Visualize a recipe&#39;s ingredient list.
    * @param id The item&#39;s id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
    * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeIngredientsByID(id: kotlin.Int, defaultCss: kotlin.Boolean?, measure: kotlin.String?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"), "measure" to listOf("$measure"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/ingredientWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Recipe Nutrition Widget
    * Visualize a recipe&#39;s nutritional information as HTML including CSS.
    * @param contentMinusType The content type. (optional)
    * @param accept Accept header. (optional)
    * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeNutrition(contentMinusType: kotlin.String?, accept: kotlin.String?, language: kotlin.String?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to contentMinusType.toString(), "Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeNutrition",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Recipe Nutrition by ID Widget
    * Visualize a recipe&#39;s nutritional information as HTML including CSS.
    * @param id The item&#39;s id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
    * @param accept Accept header. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeNutritionByID(id: kotlin.Int, defaultCss: kotlin.Boolean?, accept: kotlin.String?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/nutritionWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Price Breakdown by ID Widget
    * Visualize a recipe&#39;s price breakdown.
    * @param id The item&#39;s id. 
    * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipePriceBreakdownByID(id: kotlin.Int, defaultCss: kotlin.Boolean?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("defaultCss" to listOf("$defaultCss"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/priceBreakdownWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Recipe Taste Widget
    * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
    * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
    * @param contentMinusType The content type. (optional)
    * @param accept Accept header. (optional)
    * @param normalize Whether to normalize to the strongest taste. (optional)
    * @param rgb Red, green, blue values for the chart color. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeTaste(language: kotlin.String?, contentMinusType: kotlin.String?, accept: kotlin.String?, normalize: kotlin.Boolean?, rgb: kotlin.String?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("language" to listOf("$language"), "normalize" to listOf("$normalize"), "rgb" to listOf("$rgb"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to contentMinusType.toString(), "Accept" to accept.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/recipes/visualizeTaste",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Recipe Taste by ID Widget
    * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    * @param id The item&#39;s id. 
    * @param normalize Whether to normalize to the strongest taste. (optional, default to true)
    * @param rgb Red, green, blue values for the chart color. (optional)
    * @return kotlin.String
    */
    @Suppress("UNCHECKED_CAST")
    fun visualizeRecipeTasteByID(id: kotlin.Int, normalize: kotlin.Boolean?, rgb: kotlin.String?) : kotlin.String {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("normalize" to listOf("$normalize"), "rgb" to listOf("$rgb"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/recipes/{id}/tasteWidget".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
