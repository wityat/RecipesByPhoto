/**
* spoonacular API
* The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 800,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
*
* The version of the OpenAPI document: 1.0
* Contact: mail@spoonacular.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.spoonacular

import com.spoonacular.client.model.InlineObject10
import com.spoonacular.client.model.InlineObject3
import com.spoonacular.client.model.InlineObject4
import com.spoonacular.client.model.InlineObject5
import com.spoonacular.client.model.InlineObject6
import com.spoonacular.client.model.InlineObject7
import com.spoonacular.client.model.InlineObject8
import com.spoonacular.client.model.InlineObject9
import com.spoonacular.client.model.InlineResponse20037
import com.spoonacular.client.model.InlineResponse20038
import com.spoonacular.client.model.InlineResponse20039
import com.spoonacular.client.model.InlineResponse20040
import com.spoonacular.client.model.InlineResponse20041
import com.spoonacular.client.model.InlineResponse20042
import com.spoonacular.client.model.InlineResponse20043

import spoonacular.infrastructure.ApiClient
import spoonacular.infrastructure.ClientException
import spoonacular.infrastructure.ClientError
import spoonacular.infrastructure.ServerException
import spoonacular.infrastructure.ServerError
import spoonacular.infrastructure.MultiValueMap
import spoonacular.infrastructure.RequestConfig
import spoonacular.infrastructure.RequestMethod
import spoonacular.infrastructure.ResponseType
import spoonacular.infrastructure.Success
import spoonacular.infrastructure.toMultiValue

class MealPlanningApi(basePath: kotlin.String = "https://api.spoonacular.com") : ApiClient(basePath) {

    /**
    * Add Meal Plan Template
    * Add a meal plan template for a user.
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @param inlineObject6  
    * @return InlineResponse20040
    */
    @Suppress("UNCHECKED_CAST")
    fun addMealPlanTemplate(username: kotlin.String, hash: kotlin.String, inlineObject6: InlineObject6) : InlineResponse20040 {
        val localVariableBody: kotlin.Any? = inlineObject6
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/mealplanner/{username}/templates".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20040>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20040
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Add to Meal Plan
    * Add an item to the user&#39;s meal plan.
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @param inlineObject4  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun addToMealPlan(username: kotlin.String, hash: kotlin.String, inlineObject4: InlineObject4) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject4
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/mealplanner/{username}/items".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Add to Shopping List
    * Add an item to the current shopping list of a user.
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @param inlineObject9  
    * @return InlineResponse20042
    */
    @Suppress("UNCHECKED_CAST")
    fun addToShoppingList(username: kotlin.String, hash: kotlin.String, inlineObject9: InlineObject9) : InlineResponse20042 {
        val localVariableBody: kotlin.Any? = inlineObject9
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/mealplanner/{username}/shopping-list/items".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20042>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20042
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Clear Meal Plan Day
    * Delete all planned items from the user&#39;s meal plan for a specific day.
    * @param username The username. 
    * @param date The date in the format yyyy-mm-dd. 
    * @param hash The private hash for the username. 
    * @param inlineObject3  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun clearMealPlanDay(username: kotlin.String, date: kotlin.String, hash: kotlin.String, inlineObject3: InlineObject3) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject3
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/mealplanner/{username}/day/{date}".replace("{"+"username"+"}", "$username").replace("{"+"date"+"}", "$date"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Connect User
    * In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
    * @param body  
    * @return InlineResponse20043
    */
    @Suppress("UNCHECKED_CAST")
    fun connectUser(body: kotlin.Any) : InlineResponse20043 {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/users/connect",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20043>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20043
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Delete from Meal Plan
    * Delete an item from the user&#39;s meal plan.
    * @param username The username. 
    * @param id The shopping list item id. 
    * @param hash The private hash for the username. 
    * @param inlineObject5  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun deleteFromMealPlan(username: kotlin.String, id: Float, hash: kotlin.String, inlineObject5: InlineObject5) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject5
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/mealplanner/{username}/items/{id}".replace("{"+"username"+"}", "$username").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Delete from Shopping List
    * Delete an item from the current shopping list of the user.
    * @param username The username. 
    * @param id The item&#39;s id. 
    * @param hash The private hash for the username. 
    * @param inlineObject10  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun deleteFromShoppingList(username: kotlin.String, id: kotlin.Int, hash: kotlin.String, inlineObject10: InlineObject10) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject10
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/mealplanner/{username}/shopping-list/items/{id}".replace("{"+"username"+"}", "$username").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Delete Meal Plan Template
    * Delete a meal plan template for a user.
    * @param username The username. 
    * @param id The item&#39;s id. 
    * @param hash The private hash for the username. 
    * @param inlineObject7  
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun deleteMealPlanTemplate(username: kotlin.String, id: kotlin.Int, hash: kotlin.String, inlineObject7: InlineObject7) : kotlin.Any {
        val localVariableBody: kotlin.Any? = inlineObject7
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/mealplanner/{username}/templates/{id}".replace("{"+"username"+"}", "$username").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Generate Meal Plan
    * Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
    * @param timeFrame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
    * @param targetCalories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
    * @param diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
    * @param exclude A comma-separated list of allergens or ingredients that must be excluded. (optional)
    * @return InlineResponse20037
    */
    @Suppress("UNCHECKED_CAST")
    fun generateMealPlan(timeFrame: kotlin.String?, targetCalories: Float?, diet: kotlin.String?, exclude: kotlin.String?) : InlineResponse20037 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("timeFrame" to listOf("$timeFrame"), "targetCalories" to listOf("$targetCalories"), "diet" to listOf("$diet"), "exclude" to listOf("$exclude"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/generate",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20037>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20037
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Generate Shopping List
    * Generate the shopping list for a user from the meal planner in a given time frame.
    * @param username The username. 
    * @param startMinusDate The start date in the format yyyy-mm-dd. 
    * @param endMinusDate The end date in the format yyyy-mm-dd. 
    * @param hash The private hash for the username. 
    * @param inlineObject8  
    * @return InlineResponse20042
    */
    @Suppress("UNCHECKED_CAST")
    fun generateShoppingList(username: kotlin.String, startMinusDate: kotlin.String, endMinusDate: kotlin.String, hash: kotlin.String, inlineObject8: InlineObject8) : InlineResponse20042 {
        val localVariableBody: kotlin.Any? = inlineObject8
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/mealplanner/{username}/shopping-list/{start-date}/{end-date}".replace("{"+"username"+"}", "$username").replace("{"+"start-date"+"}", "$startMinusDate").replace("{"+"end-date"+"}", "$endMinusDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20042>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20042
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Meal Plan Template
    * Get information about a meal plan template.
    * @param username The username. 
    * @param id The item&#39;s id. 
    * @param hash The private hash for the username. 
    * @return InlineResponse20041
    */
    @Suppress("UNCHECKED_CAST")
    fun getMealPlanTemplate(username: kotlin.String, id: kotlin.Int, hash: kotlin.String) : InlineResponse20041 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/{username}/templates/{id}".replace("{"+"username"+"}", "$username").replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20041>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20041
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Meal Plan Templates
    * Get meal plan templates from user or public ones.
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @return InlineResponse20039
    */
    @Suppress("UNCHECKED_CAST")
    fun getMealPlanTemplates(username: kotlin.String, hash: kotlin.String) : InlineResponse20039 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/{username}/templates".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20039>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20039
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Meal Plan Week
    * Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
    * @param username The username. 
    * @param startMinusDate The start date of the meal planned week in the format yyyy-mm-dd. 
    * @param hash The private hash for the username. 
    * @return InlineResponse20038
    */
    @Suppress("UNCHECKED_CAST")
    fun getMealPlanWeek(username: kotlin.String, startMinusDate: kotlin.String, hash: kotlin.String) : InlineResponse20038 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/{username}/week/{start-date}".replace("{"+"username"+"}", "$username").replace("{"+"start-date"+"}", "$startMinusDate"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20038>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20038
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Get Shopping List
    * Get the current shopping list for the given user.
    * @param username The username. 
    * @param hash The private hash for the username. 
    * @return InlineResponse20042
    */
    @Suppress("UNCHECKED_CAST")
    fun getShoppingList(username: kotlin.String, hash: kotlin.String) : InlineResponse20042 {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("hash" to listOf("$hash"))
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/mealplanner/{username}/shopping-list".replace("{"+"username"+"}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<InlineResponse20042>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse20042
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
